EagerStream<T>

DONE
    void forEach(Block<? super T> block);
    Stream<T> filter(Predicate<? super T> predicate);
    <A extends Destination<? super T>> A into(A target);
    <R> Stream<R> map(Mapper<? extends R, ? super T> mapper);

TODO
    Stream<T> sorted(Comparator<? super T> comparator);

    boolean anyMatch(Predicate<? super T> predicate);
    boolean allMatch(Predicate<? super T> predicate);
    boolean noneMatch(Predicate<? super T> predicate);

    Optional<T> findFirst();
    Optional<T> findAny();

    Stream<T> cumulate(BinaryOperator<T> operator);
    <R> Stream<R> flatMap(FlatMapper<? extends R, ? super T> mapper);
    Stream<T> uniqueElements();

    Stream<T> tee(Block<? super T> block);
    Stream<T> limit(int n);
    Stream<T> skip(int n);


    <U> Map<U, Collection<T>> groupBy(Mapper<? extends U, ? super T> classifier);
    <U, W> Map<U, W> reduceBy(Mapper<? extends U, ? super T> classifier, Factory<W> baseFactory, Combiner<W, W, T> reducer);
    T reduce(T base, BinaryOperator<T> op);
    Optional<T> reduce(BinaryOperator<T> op);

    <U> U fold(Factory<U> baseFactory, Combiner<U, U, T> reducer, BinaryOperator<U> combiner);

    Stream<T> sequential();
    Stream<T> unordered();
    Object[] toArray();
}