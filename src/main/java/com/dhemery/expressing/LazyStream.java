package com.dhemery.expressing;

import com.dhemery.core.Action;
import com.dhemery.core.Feature;
import org.hamcrest.Matcher;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;

/**
 * A lazy stream over the objects supplied by an iterable source.
 * The stream iterates over the items as late as possible.
 * @param <T> the type of object supplied by the stream
 */
public class LazyStream<T> {
    private final Iterator<T> source;

    private LazyStream(Iterator<T> source) {
        this.source = source;
    }

    /**
     * Create a lazy stream over the items in the source array.
     */
    public LazyStream(T[] items) {
        this(Arrays.asList(items));
    }

    /**
     * Create a lazy stream over the items supplied by the iterable source.
     */
    public LazyStream(Iterable<T> items) {
        this(items == null ? Collections.<T>emptySet().iterator() : items.iterator());
    }

    /**
     * Return a stream of the source items that satisfy the criteria.
     */
    public LazyStream<T> filter(Matcher<? super T> criteria) {
        return streamOf(criteria);
    }

    private LazyStream streamOf(Matcher<? super T> criteria) {
        return lazyStreamOf(filteringIterator(criteria));
    }

    /**
     * Perform the action on each source item.
     */
    public void forEach(Action<? super T> action) {
        if(action == null) return;
        while(source.hasNext()) action.actOn(source.next());
    }

    /**
     * Append each source item into the given destination
     * and return the destination.
     */
    public <C extends Collection<? super T>> C into(C destination) {
        while(source.hasNext()) destination.add(source.next());
        return destination;
    }

    /**
     * Return a stream of values generated by applying the given function to each source item.
     */
    public <F> LazyStream<F> map(Feature<? super T, F> function) {
        return lazyStreamOf(mappingIterator(function));
    }

    private static <S> LazyStream<S> lazyStreamOf(Iterator<S> source) {
        return new LazyStream<S>(source);
    }

    private <F> MappingIterator<T,F> mappingIterator(Feature<? super T, F> function) {
        return new MappingIterator(source, function);
    }

    private FilteringIterator<T> filteringIterator(Matcher<? super T> criteria) {
        return new FilteringIterator(source, criteria);
    }
}
